// ‚úÖ File: app/products/page.tsx
/**
 * Trang /products
 * - ‚úÖ OFFLINE FIRST:
 *    + Lu√¥n th·ª≠ load d·ªØ li·ªáu ƒë√£ cache trong IndexedDB (loadProductsFromDB) tr∆∞·ªõc
 *    + N·∫øu c√≥ ‚Üí hi·ªÉn th·ªã ngay (offline mode), k√®m banner "‚ö†Ô∏è ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu offline"
 *    + N·∫øu ch∆∞a c√≥ ‚Üí b√°o "‚ö†Ô∏è Ch∆∞a c√≥ s·∫£n ph·∫©m, c·∫ßn m·ªü online ƒë·ªÉ ƒë·ªìng b·ªô l·∫ßn ƒë·∫ßu"
 *
 * - ‚úÖ ONLINE UPDATE:
 *    + G·ªçi API /api/products b·∫±ng axios ‚Üí ƒë·ªìng b·ªô IndexedDB (syncProducts)
 *    + N·∫øu c√≥ d·ªØ li·ªáu m·ªõi kh√°c v·ªõi cache ‚Üí c·∫≠p nh·∫≠t UI v√† hi·ªán banner xanh "‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi"
 *    + N·∫øu offline/l·ªói API ‚Üí fallback v·ªÅ cache, hi·ªÉn th·ªã banner cam
 *
 * - ‚úÖ IMAGE CACHE (phi√™n b·∫£n m·ªõi):
 *    + D√πng hook useImageCacheTracker('products') thay v√¨ truy·ªÅn danh s√°ch keys
 *    + Khi c√≥ d·ªØ li·ªáu m·ªõi ‚Üí g·ªçi syncImages(urls) ƒë·ªÉ prefetch blob v√† l∆∞u IndexedDB
 *    + Khi render ‚Üí getImageBlobUrl(url) ƒë·ªÉ l·∫•y blobUrl hi·ªÉn th·ªã
 *
 * - ‚úÖ Control bar:
 *    + Search theo t√™n
 *    + Page size (10/20/50‚Ä¶)
 *    + Pagination (ƒê·∫ßu / Tr∆∞·ªõc / nh·∫≠p s·ªë / Sau / Cu·ªëi)
 *
 * - ‚úÖ Responsive:
 *    + PC: control bar hi·ªÉn th·ªã 1 h√†ng
 *    + Mobile: control bar hi·ªÉn th·ªã 3 h√†ng
 *    + Control bar ƒë·∫∑t ·ªü c·∫£ TR√äN & D∆Ø·ªöI b·∫£ng s·∫£n ph·∫©m
 *
 * üü¢ ƒê√É ƒê·ªîI SANG PH∆Ø∆†NG √ÅN M·ªöI NH∆Ø SAU:
 *    - Thay to√†n b·ªô c∆° ch·∫ø imageCache c≈© (imageKeys, replaceImageCache) b·∫±ng hook h·ª£p nh·∫•t.
 *    - D√πng { syncImages, getImageBlobUrl, progress } t·ª´ useImageCacheTracker.
 *    - C√≥ b∆∞·ªõc map blobUrl ‚Üí imageMap gi·ªëng nh∆∞ b√™n News.
 *    - Gi·∫£m code tr√πng, ƒë·ªìng nh·∫•t v·ªõi app/news/page.tsx.
 */

'use client';

import { useEffect, useRef, useState } from 'react';
import axios from 'axios';
import ProductsTable from './ProductsTable';
import ControlBar from '@/components/ControlBar';
import { Product, loadProductsFromDB, syncProducts } from '@/repositories/productRepository';
import { useImageCacheTracker } from '@/hooks/useImageCacheTracker'; // ‚úÖ hook h·ª£p nh·∫•t m·ªõi

type SortField = 'stock_status' | 'price' | 'stock_quantity' | 'name';
type SortOrder = 'asc' | 'desc';

export default function ProductsListPage() {
  // ---------------------- STATE ----------------------
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [usingCache, setUsingCache] = useState(false);
  const [justUpdated, setJustUpdated] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // Sort / Filter / Pagination
  const [sortField, setSortField] = useState<SortField>('stock_status');
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [searchText, setSearchText] = useState('');

  const productsRef = useRef<Product[]>([]);
  useEffect(() => {
    productsRef.current = products;
  }, [products]);

  // ---------------------- IMAGE CACHE ----------------------
  const {
    syncImages,
    getImageBlobUrl,
    loading: imageSyncing,
    progress,
  } = useImageCacheTracker('products');
  const [imageMap, setImageMap] = useState<Record<string, string>>({});

  // ---------------------- OFFLINE FIRST ----------------------
  const loadOfflineFirst = async () => {
    const cached = await loadProductsFromDB();
    if (cached.length > 0) {
      setProducts(cached);
      setUsingCache(true);
      console.log(`üóÑ C√≥ ${cached.length} s·∫£n ph·∫©m trong Local DB`);
    }
    setLoading(false);
  };

  // ---------------------- ONLINE UPDATE ----------------------
  const fetchOnlineAndUpdate = async () => {
    try {
      const res = await axios.get('/api/products', {
        headers: { 'Cache-Control': 'no-store' },
        validateStatus: () => true,
      });
      if (res.status < 200 || res.status >= 300)
        throw new Error(`HTTP ${res.status}: ${res.data?.error || 'API l·ªói'}`);

      const payload = res.data;
      const fresh: Product[] = Array.isArray(payload)
        ? payload
        : payload?.products ?? payload?.data ?? [];

      if (!Array.isArray(fresh) || fresh.length === 0) {
        setLoading(false);
        return;
      }

      const hasChange = await syncProducts(fresh);
      setErrorMessage(null);

      if (hasChange) {
        setProducts(fresh);
        setJustUpdated(true);
      } else {
        setJustUpdated(false);
      }

      setUsingCache(false);
      setLoading(false);

      // ‚úÖ Sau khi sync s·∫£n ph·∫©m, ƒë·ªìng b·ªô lu√¥n ·∫£nh
      const urls = fresh.map(p => p.image_url).filter(Boolean) as string[];
      if (urls.length) {
        syncImages(urls);
      }
    } catch (err: any) {
      console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i online:', err);
      setErrorMessage(err.message || '‚ö†Ô∏è C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu');
      setUsingCache(true);
      setJustUpdated(false);
      if (productsRef.current.length === 0) setLoading(false);
    }
  };

  // ---------------------- MOUNT ----------------------
  useEffect(() => {
    const init = async () => {
      await loadOfflineFirst();
      if (navigator.onLine) {
        await fetchOnlineAndUpdate();
      } else {
        setUsingCache(true);
        setLoading(false);
      }
    };
    init();

    const handleOnline = () => fetchOnlineAndUpdate();
    window.addEventListener('online', handleOnline);
    return () => window.removeEventListener('online', handleOnline);
  }, []);

  // ---------------------- IMAGE BLOB MAP ----------------------
  useEffect(() => {
    if (!products.length) return;
    (async () => {
      const map: Record<string, string> = {};
      for (const p of products) {
        if (!p.image_url) continue;
        const blobUrl = await getImageBlobUrl(p.image_url);
        if (blobUrl) map[p.id ?? p.sku ?? p.name] = blobUrl;
      }
      setImageMap(map);
    })();
  }, [products, getImageBlobUrl]);

  // ---------------------- SORT / FILTER / PAGINATION ----------------------
  const handleSortChange = (field: SortField) => {
    if (field === sortField) setSortOrder(o => (o === 'asc' ? 'desc' : 'asc'));
    else {
      setSortField(field);
      setSortOrder('asc');
    }
    setCurrentPage(1);
  };

  const filteredAndSorted = sortedAndFiltered(products, sortField, sortOrder, searchText);
  const totalPages = Math.max(1, Math.ceil(filteredAndSorted.length / pageSize));
  const paginatedProducts = filteredAndSorted.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  // ---------------------- RENDER ----------------------
  return (
    <div style={{ padding: '1rem' }}>
      <h1>Danh s√°ch s·∫£n ph·∫©m</h1>

      {loading && <p>‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</p>}
      {imageSyncing && <p style={{ color: 'dodgerblue' }}>üíæ ƒêang ƒë·ªìng b·ªô ·∫£nh... {progress}%</p>}
      {usingCache && !loading && (
        <p style={{ color: 'orange' }}>‚ö†Ô∏è ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu offline v√† ch·ªù c·∫≠p nh·∫≠t...</p>
      )}
      {justUpdated && !usingCache && <p style={{ color: 'green' }}>‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi</p>}
      {errorMessage && !loading && <p style={{ color: 'red' }}>‚ö†Ô∏è {errorMessage}</p>}

      <ControlBar
        searchText={searchText}
        setSearchText={v => {
          setSearchText(v);
          setCurrentPage(1);
        }}
        pageSize={pageSize}
        setPageSize={n => {
          setPageSize(n);
          setCurrentPage(1);
        }}
        currentPage={currentPage}
        setCurrentPage={setCurrentPage}
        totalPages={totalPages}
        searchPlaceholder="üîé T√¨m s·∫£n ph·∫©m..."
        unitLabel="sp/trang"
      />

      <ProductsTable
        products={paginatedProducts}
        imageCache={imageMap}
        sortField={sortField}
        sortOrder={sortOrder}
        onSortChange={handleSortChange}
        searchText={searchText}
      />

      <ControlBar
        searchText={searchText}
        setSearchText={v => {
          setSearchText(v);
          setCurrentPage(1);
        }}
        pageSize={pageSize}
        setPageSize={n => {
          setPageSize(n);
          setCurrentPage(1);
        }}
        currentPage={currentPage}
        setCurrentPage={setCurrentPage}
        totalPages={totalPages}
        searchPlaceholder="üîé T√¨m s·∫£n ph·∫©m..."
        unitLabel="sp/trang"
      />
    </div>
  );
}

// ---------------------- Helper: L·ªçc & S·∫Øp x·∫øp ----------------------
function sortedAndFiltered(
  products: Product[],
  sortField: SortField,
  sortOrder: SortOrder,
  searchText: string
) {
  const filtered = products.filter(p => p.name?.toLowerCase().includes(searchText.toLowerCase()));
  return filtered.sort((a, b) => {
    const getVal = (p: Product) => {
      if (sortField === 'stock_status') return (p.stock_status || '').toLowerCase();
      if (sortField === 'name') return (p.name || '').toLowerCase();
      if (sortField === 'price') return Number((p as any).price ?? '0') || 0;
      if (sortField === 'stock_quantity') return Number((p as any).stock_quantity ?? 0);
      return 0;
    };
    const va = getVal(a);
    const vb = getVal(b);
    if (va < vb) return sortOrder === 'asc' ? -1 : 1;
    if (va > vb) return sortOrder === 'asc' ? 1 : -1;
    return 0;
  });
}
