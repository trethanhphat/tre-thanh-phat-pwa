// üìÑ File: app/products/page.tsx
/**
 * Trang /products
 * - ‚úÖ OFFLINE FIRST:
 *    + Lu√¥n th·ª≠ load d·ªØ li·ªáu ƒë√£ cache trong IndexedDB (loadProductsFromDB) tr∆∞·ªõc
 *    + N·∫øu c√≥ ‚Üí hi·ªÉn th·ªã ngay (offline mode), k√®m banner "‚ö†Ô∏è ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu offline"
 *    + N·∫øu ch∆∞a c√≥ ‚Üí b√°o "‚ö†Ô∏è Ch∆∞a c√≥ s·∫£n ph·∫©m, c·∫ßn m·ªü online ƒë·ªÉ ƒë·ªìng b·ªô l·∫ßn ƒë·∫ßu"
 *
 * - ‚úÖ ONLINE UPDATE:
 *    + G·ªçi API /api/products b·∫±ng axios ‚Üí ƒë·ªìng b·ªô IndexedDB (syncProducts)
 *    + N·∫øu c√≥ d·ªØ li·ªáu m·ªõi kh√°c v·ªõi cache ‚Üí c·∫≠p nh·∫≠t UI v√† hi·ªán banner xanh "‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi"
 *    + N·∫øu offline/l·ªói API ‚Üí fallback v·ªÅ cache, hi·ªÉn th·ªã banner cam
 *
 * - ‚úÖ Image cache:
 *    + T·∫°o map id ‚Üí URL (c√≥ th·ªÉ l√† blob:)
 *    + T·ª± revoke khi thay ƒë·ªïi ho·∫∑c unmount ƒë·ªÉ tr√°nh memory leak
 *
 * - ‚úÖ Control bar:
 *    + Search theo t√™n
 *    + Page size (10/20/50‚Ä¶)
 *    + Pagination (ƒê·∫ßu / Tr∆∞·ªõc / nh·∫≠p s·ªë / Sau / Cu·ªëi)
 *
 * - ‚úÖ Responsive:
 *    + PC: control bar hi·ªÉn th·ªã 1 h√†ng
 *    + Mobile: control bar hi·ªÉn th·ªã 3 h√†ng
 *    + Control bar ƒë·∫∑t ·ªü c·∫£ TR√äN & D∆Ø·ªöI b·∫£ng s·∫£n ph·∫©m
 */
// ‚úÖ File: app/products/page.tsx
'use client';

import { useEffect, useRef, useState } from 'react';
import axios from 'axios';
import ProductsTable from './ProductsTable';
import ControlBar from '@/components/ControlBar';
import { Product, loadProductsFromDB, syncProducts } from '@/lib/products';
import { useImageCacheTracker } from '@/hooks/useImageCacheTracker';
import { getImageURL } from '@/lib/images'; // ‚úÖ g·ªôp chung d√πng ƒë∆∞·ª£c cho news/products

type SortField = 'stock_status' | 'price' | 'stock_quantity' | 'name';
type SortOrder = 'asc' | 'desc';

export default function ProductsListPage() {
  // ---------------------- STATE ----------------------
  const [products, setProducts] = useState<Product[]>([]);
  // ‚úÖ Prefetch v√† cache ·∫£nh s·∫£n ph·∫©m (d√πng chung hook m·ªõi)
  useImageCacheTracker(products.map(p => p.image_url).filter(Boolean), { type: 'product' });
  const [imageCache, setImageCache] = useState<Record<number, string>>({});
  const [loading, setLoading] = useState(true);
  const [usingCache, setUsingCache] = useState(false);
  const [justUpdated, setJustUpdated] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // Sort / Filter / Pagination
  const [sortField, setSortField] = useState<SortField>('stock_status');
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [searchText, setSearchText] = useState('');

  const productsRef = useRef<Product[]>([]);
  useEffect(() => {
    productsRef.current = products;
  }, [products]);

  // ---------------------- IMAGE CACHE ----------------------
  const loadImages = async (list: Product[]) => {
    const entries = await Promise.all(
      list.map(async p => {
        if (p.image_url) {
          const blobUrl = await getImageURL(p.image_url);
          return [p.id, blobUrl] as const;
        }
        return [p.id, ''] as const;
      })
    );
    return Object.fromEntries(entries);
  };

  const replaceImageCache = (next: Record<number, string>) => {
    // cleanup blob c≈©
    Object.values(imageCache).forEach(url => {
      if (url && url.startsWith('blob:')) URL.revokeObjectURL(url);
    });
    setImageCache(next);
  };

  // ---------------------- OFFLINE FIRST ----------------------
  const loadOfflineFirst = async () => {
    const cached = await loadProductsFromDB();
    if (cached.length > 0) {
      setProducts(cached);
      replaceImageCache(await loadImages(cached));
      setUsingCache(true);
    }
    setLoading(false);
  };

  // ---------------------- ONLINE UPDATE ----------------------
  const fetchOnlineAndUpdate = async () => {
    try {
      const res = await axios.get('/api/products', {
        headers: { 'Cache-Control': 'no-store' },
        validateStatus: () => true,
      });
      if (res.status < 200 || res.status >= 300) throw new Error(`HTTP ${res.status}`);

      const payload = res.data;
      const fresh: Product[] = Array.isArray(payload)
        ? payload
        : payload?.products ?? payload?.data ?? [];

      if (!Array.isArray(fresh)) throw new Error('API kh√¥ng tr·∫£ v·ªÅ m·∫£ng h·ª£p l·ªá');
      if (fresh.length === 0) {
        setLoading(false);
        return;
      }

      const hasChange = await syncProducts(fresh);
      setErrorMessage(null);

      if (hasChange) {
        setProducts(fresh);
        replaceImageCache(await loadImages(fresh));
        setJustUpdated(true);
      } else {
        setJustUpdated(false);
      }
      setUsingCache(false);
      setLoading(false);
    } catch (err: any) {
      console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i online:', err);
      setErrorMessage(err.message || '‚ö†Ô∏è C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu');
      setUsingCache(true);
      setJustUpdated(false);
      if (productsRef.current.length === 0) setLoading(false);
    }
  };

  // ---------------------- MOUNT ----------------------
  useEffect(() => {
    const init = async () => {
      await loadOfflineFirst();
      if (navigator.onLine) {
        await fetchOnlineAndUpdate();
      } else {
        setUsingCache(true);
        setLoading(false);
      }
    };
    init();

    const handleOnline = () => fetchOnlineAndUpdate();
    window.addEventListener('online', handleOnline);
    return () => {
      window.removeEventListener('online', handleOnline);
      Object.values(imageCache).forEach(url => {
        if (url && url.startsWith('blob:')) URL.revokeObjectURL(url);
      });
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // ---------------------- SORT / FILTER / PAGINATION ----------------------
  const handleSortChange = (field: SortField) => {
    if (field === sortField) setSortOrder(o => (o === 'asc' ? 'desc' : 'asc'));
    else {
      setSortField(field);
      setSortOrder('asc');
    }
    setCurrentPage(1);
  };

  const filteredAndSorted = sortedAndFiltered(products, sortField, sortOrder, searchText);
  const totalPages = Math.max(1, Math.ceil(filteredAndSorted.length / pageSize));
  const paginatedProducts = filteredAndSorted.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  // ---------------------- RENDER ----------------------
  return (
    <div style={{ padding: '1rem' }}>
      <h1>Danh s√°ch s·∫£n ph·∫©m</h1>

      {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}
      {usingCache && !justUpdated && (
        <p style={{ color: 'orange' }}>
          ‚ö†Ô∏è ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n m√°y (ch∆∞a c√≥ c·∫≠p nh·∫≠t m·ªõi).
          {products.length === 0 && ' Ch∆∞a c√≥ s·∫£n ph·∫©m, c·∫ßn m·ªü online ƒë·ªÉ ƒë·ªìng b·ªô l·∫ßn ƒë·∫ßu.'}
        </p>
      )}
      {justUpdated && !usingCache && <p style={{ color: 'green' }}>‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi</p>}
      {!justUpdated && !usingCache && <p style={{ color: 'green' }}>‚úÖ D·ªØ li·ªáu ƒë√£ l√† m·ªõi nh·∫•t</p>}

      {loading ? (
        <p>‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</p>
      ) : products.length === 0 ? (
        <p>‚ö†Ô∏è Kh√¥ng c√≥ s·∫£n ph·∫©m</p>
      ) : (
        <>
          {/* Control bar TR√äN b·∫£ng */}
          <ControlBar
            searchText={searchText}
            setSearchText={setSearchText}
            pageSize={pageSize}
            setPageSize={setPageSize}
            currentPage={currentPage}
            setCurrentPage={setCurrentPage}
            totalPages={totalPages}
          />

          <ProductsTable
            products={paginatedProducts}
            imageCache={imageCache}
            sortField={sortField}
            sortOrder={sortOrder}
            onSortChange={handleSortChange}
            searchText={searchText}
          />

          {/* Control bar D∆Ø·ªöI b·∫£ng */}
          <ControlBar
            searchText={searchText}
            setSearchText={setSearchText}
            pageSize={pageSize}
            setPageSize={setPageSize}
            currentPage={currentPage}
            setCurrentPage={setCurrentPage}
            totalPages={totalPages}
          />
        </>
      )}
    </div>
  );
}

// ---------------------- Helper: L·ªçc & S·∫Øp x·∫øp ----------------------
function sortedAndFiltered(
  products: Product[],
  sortField: SortField,
  sortOrder: SortOrder,
  searchText: string
) {
  const filtered = products.filter(p => p.name?.toLowerCase().includes(searchText.toLowerCase()));
  return filtered.sort((a, b) => {
    const getVal = (p: Product) => {
      if (sortField === 'stock_status') return (p.stock_status || '').toLowerCase();
      if (sortField === 'name') return (p.name || '').toLowerCase();
      if (sortField === 'price') return Number((p as any).price ?? '0') || 0;
      if (sortField === 'stock_quantity') return Number((p as any).stock_quantity ?? 0);
      return 0;
    };
    const va = getVal(a);
    const vb = getVal(b);
    if (va < vb) return sortOrder === 'asc' ? -1 : 1;
    if (va > vb) return sortOrder === 'asc' ? 1 : -1;
    return 0;
  });
}
