// File: /src/hooks/useServiceWorkerUpdate.ts

import { useEffect, useState } from 'react';

type UpdateStatus = 'idle' | 'checking' | 'hasUpdate' | 'updating' | 'done' | 'error';

export function useServiceWorkerUpdate() {
  const [waitingWorker, setWaitingWorker] = useState<ServiceWorker | null>(null);
  const [status, setStatus] = useState<UpdateStatus>('idle');
  const [connectionType, setConnectionType] = useState<string | null>(null);
  const [hasUpdate, setHasUpdate] = useState(false);

  useEffect(() => {
    if (typeof window === 'undefined' || !('serviceWorker' in navigator)) return;

    // üîπ Theo d√µi lo·∫°i k·∫øt n·ªëi (Wi-Fi / 4G / 3G)
    const connection =
      (navigator as any).connection ||
      (navigator as any).mozConnection ||
      (navigator as any).webkitConnection;
    if (connection?.effectiveType) {
      setConnectionType(connection.effectiveType);
    }

    // üîπ L·∫•y registration hi·ªán c√≥
    navigator.serviceWorker.getRegistration().then(reg => {
      if (!reg) return;

      // Khi c√≥ update m·ªõi
      reg.onupdatefound = () => {
        const newWorker = reg.installing;
        if (!newWorker) return;

        newWorker.onstatechange = () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            setWaitingWorker(newWorker);
            setHasUpdate(true);
            setStatus('hasUpdate');
            console.log('[PWA] ‚ö° C√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi s·∫µn s√†ng.');
          }
        };
      };
    });

    // Khi SW m·ªõi ƒë∆∞·ª£c k√≠ch ho·∫°t
    const onControllerChange = () => {
      console.log('[PWA] ‚úÖ B·∫£n c·∫≠p nh·∫≠t ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.');
      setStatus('done');
      // Tr√°nh reload loop ‚Äî ch·ªâ reload 1 l·∫ßn
      if (!sessionStorage.getItem('pwa_reloaded')) {
        sessionStorage.setItem('pwa_reloaded', 'true');
        setTimeout(() => window.location.reload(), 1500);
      }
    };

    navigator.serviceWorker.addEventListener('controllerchange', onControllerChange);
    return () => {
      navigator.serviceWorker.removeEventListener('controllerchange', onControllerChange);
    };
  }, []);

  // ‚úÖ Khi ng∆∞·ªùi d√πng nh·∫•n "C·∫≠p nh·∫≠t"
  const update = () => {
    if (!navigator.onLine) {
      alert('‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng. Vui l√≤ng th·ª≠ l·∫°i khi c√≥ Internet.');
      return;
    }

    if (connectionType && connectionType !== 'wifi') {
      const confirmUpdate = confirm(
        '‚ö†Ô∏è B·∫°n ƒëang d√πng m·∫°ng di ƒë·ªông. T·∫£i b·∫£n c·∫≠p nh·∫≠t c√≥ th·ªÉ t·ªën d·ªØ li·ªáu.\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?'
      );
      if (!confirmUpdate) {
        alert('‚è≥ B·∫£n c·∫≠p nh·∫≠t s·∫Ω t·ª± ƒë·ªông c√†i khi b·∫°n c√≥ Wi-Fi.');
        return;
      }
    }

    if (waitingWorker) {
      console.log('[PWA] üöÄ G·ª≠i t√≠n hi·ªáu SKIP_WAITING ƒë·ªÉ k√≠ch ho·∫°t SW m·ªõi.');
      setStatus('updating');
      waitingWorker.postMessage({ type: 'SKIP_WAITING' });
    } else {
      alert('Kh√¥ng c√≥ b·∫£n c·∫≠p nh·∫≠t kh·∫£ d·ª•ng.');
    }
  };

  return {
    hasUpdate,
    update,
    status, // 'hasUpdate' | 'updating' | 'done'
    connectionType,
  };
}
