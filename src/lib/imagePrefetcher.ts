// ‚úÖ Prefetch & warm CDN + IndexedDB image cache (d√πng chung cho news + product)

import { ensureNewsImageCachedByUrl } from './news_images';
import { ensureProductImageCachedByUrl } from './product_images';

interface PrefetchOptions {
  /** Danh s√°ch URL ·∫£nh */
  urls: string[];
  /** Lo·∫°i ·∫£nh: 'news' ho·∫∑c 'product' */
  type?: 'news' | 'product';
  /** S·ªë l∆∞·ª£ng ·∫£nh ∆∞u ti√™n (m·∫∑c ƒë·ªãnh 5) */
  topCount?: number;
  /** C√≥ prefetch ·∫£nh c√≤n l·∫°i kh√¥ng */
  includeRest?: boolean;
}

/**
 * Prefetch ·∫£nh n·ªÅn ƒë·ªÉ warm CDN + local cache (IndexedDB)
 * - ∆Øu ti√™n top N ·∫£nh ƒë·∫ßu
 * - B·ªè qua n·∫øu ng∆∞·ªùi d√πng b·∫≠t ti·∫øt ki·ªám d·ªØ li·ªáu
 * - T·ª± ƒë·ªông g·ªçi ƒë√∫ng module cache (news/product)
 */
export async function prefetchImagesInBackground({
  urls,
  type = 'news',
  topCount = 5,
  includeRest = false,
}: PrefetchOptions): Promise<void> {
  if (!Array.isArray(urls) || urls.length === 0) return;

  // üîπ B·ªè qua khi b·∫≠t ti·∫øt ki·ªám d·ªØ li·ªáu
  if (navigator.connection?.saveData) {
    console.info('[prefetch] B·ªè qua do b·∫≠t ti·∫øt ki·ªám d·ªØ li·ªáu.');
    return;
  }

  const topUrls = urls.slice(0, topCount);
  const restUrls = includeRest ? urls.slice(topCount) : [];

  // Prefetch top ·∫£nh
  for (const url of topUrls) {
    prefetchSingleImage(url, type, true);
  }

  // Prefetch ph·∫ßn c√≤n l·∫°i (ƒë·ªô ∆∞u ti√™n th·∫•p)
  if (restUrls.length > 0) {
    setTimeout(() => {
      for (const url of restUrls) {
        prefetchSingleImage(url, type, false);
      }
    }, 3000);
  }
}

/**
 * Prefetch 1 ·∫£nh: warm CDN + l∆∞u v√†o IndexedDB
 * D√πng priority th·∫•p ƒë·ªÉ tr√°nh chi·∫øm bƒÉng th√¥ng UI.
 */
async function prefetchSingleImage(
  url: string,
  type: 'news' | 'product',
  isPriority: boolean
): Promise<void> {
  if (!url) return;
  try {
    // üîπ Warm CDN b·∫±ng request ·∫©n
    fetch(`/api/image-proxy?url=${encodeURIComponent(url)}`, {
      method: 'GET',
      mode: 'no-cors',
      priority: isPriority ? 'high' : 'low',
      cache: 'force-cache',
    }).catch(() => {});

    // üîπ Cache local IndexedDB
    if (type === 'news') {
      await ensureNewsImageCachedByUrl(url);
    } else {
      await ensureProductImageCachedByUrl(url);
    }
  } catch (err) {
    console.warn('[prefetchSingleImage] l·ªói:', err);
  }
}
