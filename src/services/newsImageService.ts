// ‚úÖ File: src/services/newsImageService.ts
import { initDB, STORE_NEWS_IMAGES } from '@/lib/db';

/** TTL cache (ms) ‚Äì 30 ng√†y */
const CACHE_TTL = 30 * 24 * 60 * 60 * 1000;

/** ‚úÖ T·∫°o key hash t·ª´ URL (SHA-256 hex) */
async function sha256Hex(text: string): Promise<string> {
  const msgUint8 = new TextEncoder().encode(text);
  const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

/** ‚úÖ API proxy fallback URL */
function withProxy(url: string) {
  return `/api/image-proxy?url=${encodeURIComponent(url)}`;
}

/** ‚úÖ Fetch ·∫£nh ‚Üí k√®m l·∫•y ETag n·∫øu c√≥ */
async function fetchBlobWithEtag(url: string): Promise<{ blob: Blob; etag?: string } | null> {
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const blob = await res.blob();
    if (blob.size === 0) throw new Error('Blob empty');
    const etag = res.headers.get('ETag') ?? undefined;
    return { blob, etag };
  } catch (err) {
    // kh√¥ng throw ƒë·ªÉ c√≤n th·ª≠ fallback
    console.warn('[newsImageService] fetch error', url, err);
    return null;
  }
}

/**
 * üîπ L∆∞u/c·∫≠p nh·∫≠t ·∫£nh news (key = sha256(originalUrl))
 * @param originalUrl URL g·ªëc d√πng l√†m key trong DB (b·∫Øt bu·ªôc)
 * @param fetchUrl optional - URL d√πng ƒë·ªÉ fetch (v√≠ d·ª• proxy). N·∫øu cung c·∫•p, s·∫Ω th·ª≠ fetch fetchUrl tr∆∞·ªõc r·ªìi m·ªõi fetch originalUrl
 * @returns key (sha256 hex) khi th√†nh c√¥ng, ho·∫∑c null khi fail
 */
export async function saveNewsImageIfNotExists(
  originalUrl: string,
  fetchUrl?: string
): Promise<string | null> {
  if (!originalUrl) return null;
  const db = await initDB();
  const key = await sha256Hex(originalUrl);

  const existing = await db.get(STORE_NEWS_IMAGES, key);
  if (existing && Date.now() - existing.updated_at < CACHE_TTL) {
    // v·∫´n c√≤n h·∫°n
    return key;
  }

  // Th·ª≠ fetch theo th·ª© t·ª±: fetchUrl (proxy) n·∫øu c√≥ -> originalUrl
  const targets = fetchUrl ? [fetchUrl, originalUrl] : [originalUrl];

  let result: { blob: Blob; etag?: string } | null = null;

  for (const t of targets) {
    result = await fetchBlobWithEtag(t);
    if (result) break;
  }

  if (!result) return null;

  const { blob, etag } = result;
  const updated_at = Date.now();

  await db.put(STORE_NEWS_IMAGES, {
    key,
    source_url: originalUrl, // l∆∞u URL g·ªëc ƒë·ªÉ debug/lookup
    blob,
    etag,
    updated_at,
  });

  // Kh√¥ng c·∫ßn tr·∫£ v·ªÅ blob URL ‚Äî caller c√≥ th·ªÉ g·ªçi getNewsImageURLByUrl
  console.log('[newsImageService] Cached news image', originalUrl);
  return key;
}

/** ‚úÖ Offline-first l·∫•y ·∫£nh ‚Üí n·∫øu c√≥ blob th√¨ tr·∫£ blob URL (objectURL), n·∫øu ch∆∞a c√≥ tr·∫£ proxy URL */
/** ‚úÖ Offline-first l·∫•y ·∫£nh ‚Üí ∆∞u ti√™n blob, fallback qua proxy */
export async function getNewsImageURLByUrl(url?: string): Promise<string> {
  if (!url) return '';
  const db = await initDB();
  const key = await sha256Hex(url);
  const rec = await db.get(STORE_NEWS_IMAGES, key);
  if (rec?.blob) {
    // ‚úÖ C√≥ blob ‚Üí t·∫°o object URL
    const objUrl = URL.createObjectURL(rec.blob);
    // Gi·ªØ 1 log nh·∫π ƒë·ªÉ debug (c√≥ th·ªÉ b·ªè)
    console.debug('[newsImageService] blob hit:', url);
    return objUrl;
  }
  console.debug('[newsImageService] blob miss, fallback proxy:', url);
  return withProxy(url);
}

/** Prefetch nhi·ªÅu ·∫£nh news (top N) */
export async function prefetchNewsImages(urls: string[]) {
  if (!urls?.length) return;
  const conn = (navigator as any).connection;
  if (conn?.saveData) return; // b·ªè qua n·∫øu user ti·∫øt ki·ªám d·ªØ li·ªáu

  for (const url of urls.slice(0, 10)) {
    try {
      await saveNewsImageIfNotExists(url);
    } catch (err) {
      console.warn('[newsImageService] prefetch image error', url, err);
    }
  }
}

/** Ensure cache (kh√¥ng block UI). Tr·∫£ v·ªÅ key khi th√†nh c√¥ng ho·∫∑c null khi fail */
export async function ensureNewsImageCachedByUrl(
  originalUrl?: string,
  fetchUrl?: string
): Promise<string | null> {
  if (!originalUrl) return null;
  try {
    const key = await saveNewsImageIfNotExists(originalUrl, fetchUrl);
    return key;
  } catch (err) {
    console.warn('[newsImageService] ensure cache error', originalUrl, err);
    return null;
  }
}
