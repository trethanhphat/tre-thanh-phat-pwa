// ‚úÖ File: src/services/newsImageService.ts
import { initDB, STORE_NEWS_IMAGES } from '@/lib/db';

/** ‚è± TTL cache t·ªëi ƒëa (4 gi·ªù) cho ·∫£nh tin t·ª©c */
const CACHE_TTL = 4 * 60 * 60 * 1000;

/** ‚úÖ Hash SHA-256 */
async function sha256Hex(text: string): Promise<string> {
  const data = new TextEncoder().encode(text);
  const hash = await crypto.subtle.digest('SHA-256', data);
  return Array.from(new Uint8Array(hash))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('');
}

/** ‚úÖ Hash n·ªôi dung blob */
async function hashBlob(blob: Blob): Promise<string> {
  const buf = await blob.arrayBuffer();
  const hash = await crypto.subtle.digest('SHA-256', buf);
  return Array.from(new Uint8Array(hash))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('');
}

/** ‚úÖ API proxy fallback */
function withProxy(url: string) {
  return `/api/image-proxy?url=${encodeURIComponent(url)}`;
}

/** ‚úÖ Fetch ·∫£nh k√®m ETag */
async function fetchBlobWithEtag(url: string): Promise<{ blob: Blob; etag?: string } | null> {
  try {
    console.log('[newsImageService] üîé try fetch:', url);
    const res = await fetch(url, { cache: 'no-cache' });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const blob = await res.blob();
    if (!blob.size) throw new Error('Blob empty');
    const etag = res.headers.get('ETag') ?? undefined;
    return { blob, etag };
  } catch (err) {
    console.warn('[newsImageService] ‚ùå fetch error', url, err);
    return null;
  }
}

/** ‚úÖ L∆∞u/c·∫≠p nh·∫≠t ·∫£nh tin t·ª©c (v·ªõi ki·ªÉm tra etag + blob_hash) */
export async function saveNewsImageIfNotExists(url: string) {
  if (!url) return;
  const db = await initDB();
  const key = await sha256Hex(url);
  const existing = await db.get(STORE_NEWS_IMAGES, key);

  // TTL check: n·∫øu c√≤n h·∫°n ‚Üí b·ªè qua
  if (existing && Date.now() - existing.updated_at < CACHE_TTL) {
    return;
  }

  let result = await fetchBlobWithEtag(url);
  if (!result) result = await fetchBlobWithEtag(withProxy(url));
  if (!result) return;

  const { blob, etag } = result;
  const blob_hash = await hashBlob(blob);
  const updated_at = Date.now();

  // üü¢ ƒê√£ ƒë·ªïi sang ph∆∞∆°ng √°n m·ªõi:
  // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ETag ho·∫∑c blob_hash thay ƒë·ªïi
    if (existing) {
    const sameEtag = etag && etag === existing.etag;
    const sameBlob = blob_hash === existing.blob_hash;

    if (sameEtag || sameBlob) {
      console.log(`[newsImageService] ‚ö° Skip unchanged image: ${url}`);
      return;
    }
  } else {
    // üß© N·∫øu ch∆∞a c√≥ record c√πng key ‚Üí ki·ªÉm tra xem blob n√†y ƒë√£ t·ªìn t·∫°i ·ªü key kh√°c ch∆∞a
    const allRecords = await db.getAll(STORE_NEWS_IMAGES);
    const duplicate = allRecords.find(r => r.blob_hash === blob_hash);
    if (duplicate) {
  // ‚úÖ T·∫°o alias cho key m·ªõi nh∆∞ng d√πng l·∫°i blob c≈©
  await db.put(STORE_NEWS_IMAGES, {
    key,
    source_url: url,
    blob: duplicate.blob,
    etag: duplicate.etag,
    blob_hash,
    updated_at: Date.now(),
  });
  console.log(`[newsImageService] üîÅ Linked duplicate key to existing blob`, {
    url,
    existingKey: duplicate.key,
  });
  return;
}

  }

  // üíæ L∆∞u m·ªõi ho·∫∑c c·∫≠p nh·∫≠t
  await db.put(STORE_NEWS_IMAGES, {
    key,
    source_url: url,
    blob,
    etag,
    blob_hash,
    updated_at,
  });

  console.log(`[newsImageService] üíæ Cached news image ${url}`, {
    key,
    blob_hash,
    size: blob.size,
  });


/** ‚úÖ ƒê·∫£m b·∫£o cache */
export async function ensureNewsImageCachedByUrl(url: string) {
  try {
    await saveNewsImageIfNotExists(url);
  } catch (err) {
    console.warn('[newsImageService] ‚ö†Ô∏è Cache error:', url, err);
  }
}
