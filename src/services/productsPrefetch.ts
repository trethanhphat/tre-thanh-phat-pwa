// ‚úÖ File: src/services/productsPrefetch.ts
import { initDB, STORE_PRODUCTS } from '@/lib/db';
import { ensureImageCachedByUrl } from '@/lib/ensureImageCachedByUrl';
import { Product, syncProducts } from '@/repositories/productsRepository';

let hasPrefetched = false;

/**
 * üîπ Prefetch s·∫£n ph·∫©m t·ª´ API (n·∫øu online), l∆∞u IndexedDB v√† cache ·∫£nh.
 * Ch·∫°y 1 l·∫ßn trong n·ªÅn (BackgroundPrefetch).
 */
export async function prefetchProductsOnce(force = false) {
  if (hasPrefetched && !force) return;
  hasPrefetched = true;

  if (!navigator.onLine) {
    console.log('[prefetchProductsOnce] offline ‚Üí b·ªè qua');
    return;
  }

  try {
    console.log('[prefetchProductsOnce] B·∫Øt ƒë·∫ßu t·∫£i s·∫£n ph·∫©m t·ª´ API...');
    const res = await fetch('/api/products');
    const json = await res.json();

    if (!json?.products || !Array.isArray(json.products)) {
      console.warn('[prefetchProductsOnce] Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá t·ª´ API');
      return;
    }

    const products: Product[] = json.products;
    console.log(`[prefetchProductsOnce] Nh·∫≠n ${products.length} s·∫£n ph·∫©m t·ª´ API`);

    // üîπ L∆∞u s·∫£n ph·∫©m v√†o IndexedDB (ƒë·ªìng b·ªô t·ª± ƒë·ªông)
    await syncProducts(products);

    // üîπ Cache ·∫£nh t·ª´ng s·∫£n ph·∫©m (kh√¥ng gi·ªØ trong RAM)
    for (const p of products) {
      if (p.image_url) {
        await ensureImageCachedByUrl(p.image_url, 'product');
      }
    }

    console.log('[prefetchProductsOnce] ‚úÖ Ho√†n t·∫•t prefetch s·∫£n ph·∫©m & ·∫£nh');
  } catch (err) {
    console.error('[prefetchProductsOnce] ‚ùå L·ªói:', err);
  }
}
