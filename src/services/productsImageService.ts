// File: src/services/productsImageService.ts
import { initDB, STORE_PRODUCTS_IMAGES } from '@/lib/db';

/** ‚è± TTL cache t·ªëi ƒëa (7 ng√†y) cho ·∫£nh s·∫£n ph·∫©m */
const CACHE_TTL = 7 * 24 * 60 * 60 * 1000;

/** ‚úÖ T·∫°o key hash t·ª´ URL (SHA-256 hex) */
async function sha256Hex(text: string): Promise<string> {
  const msgUint8 = new TextEncoder().encode(text);
  const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

/** ‚úÖ API proxy fallback */
function withProxy(url: string) {
  return `/api/image-proxy?url=${encodeURIComponent(url)}`;
}

/** ‚úÖ Fetch ·∫£nh ‚Üí k√®m l·∫•y ETag n·∫øu c√≥ */
async function fetchBlobWithEtag(url: string): Promise<{ blob: Blob; etag?: string } | null> {
  try {
    const res = await fetch(url, { cache: 'no-cache' });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);

    const blob = await res.blob();
    if (blob.size === 0) throw new Error('Blob empty');

    const etag = res.headers.get('ETag') ?? undefined;
    return { blob, etag };
  } catch (err) {
    console.warn('‚ùå Fetch image error:', url, err);
    return null;
  }
}

/** ‚úÖ Hash n·ªôi dung blob (SHA-256) */
async function hashBlob(blob: Blob): Promise<string> {
  const buffer = await blob.arrayBuffer();
  const digest = await crypto.subtle.digest('SHA-256', buffer);
  const bytes = Array.from(new Uint8Array(digest));
  return bytes.map(b => b.toString(16).padStart(2, '0')).join('');
}

/** ‚úÖ L∆∞u/c·∫≠p nh·∫≠t ·∫£nh s·∫£n ph·∫©m (c√≥ ki·ªÉm tra thay ƒë·ªïi n·ªôi dung) */
export const saveProductImageIfNotExists = async (url: string) => {
  if (!url) return;
  const db = await initDB();
  const key = await sha256Hex(url);
  const existing = await db.get(STORE_PRODUCTS_IMAGES, key);

  // üîπ TTL check: c√≤n h·∫°n ‚Üí b·ªè qua
  if (existing && Date.now() - existing.updated_at < CACHE_TTL) {
    return;
  }

  // üîπ Th·ª≠ fetch tr·ª±c ti·∫øp, n·∫øu l·ªói m·ªõi fallback qua proxy
  let result = await fetchBlobWithEtag(url);
  if (!result) result = await fetchBlobWithEtag(withProxy(url));
  if (!result) return;

  const { blob, etag } = result;
  const blob_hash = await hashBlob(blob);
  const updated_at = Date.now();

  // üü¢ ƒê√£ ƒë·ªïi sang ph∆∞∆°ng √°n m·ªõi nh∆∞ sau:
  // Ch·ªâ c·∫≠p nh·∫≠t khi etag ho·∫∑c blob_hash thay ƒë·ªïi
  if (existing) {
    const sameEtag = etag && etag === existing.etag;
    const sameBlob = blob_hash === existing.blob_hash;

    if (sameEtag || sameBlob) {
      // Kh√¥ng c·∫ßn ghi l·∫°i n·∫øu n·ªôi dung kh√¥ng ƒë·ªïi
      console.log(`‚ö° Skip unchanged image: ${url}`);
      return;
    }
  }

  await db.put(STORE_PRODUCTS_IMAGES, {
    key,
    source_url: url,
    blob,
    etag,
    blob_hash,
    updated_at,
  });

  console.log(`üíæ Cached product image: ${url} (${blob.size} bytes, etag=${etag || 'none'})`);
};

/** ‚úÖ Offline-first l·∫•y ·∫£nh ‚Üí n·∫øu c√≥ blob th√¨ hi·ªÉn th·ªã ngay */
export const getProductImageURL = async (url: string) => {
  if (!url) return '';
  const db = await initDB();
  const key = await sha256Hex(url);
  const record = await db.get(STORE_PRODUCTS_IMAGES, key);

  if (record?.blob) {
    return URL.createObjectURL(record.blob);
  }

  // üîπ N·∫øu ch∆∞a c√≥ blob ‚Üí th·ª≠ online tr∆∞·ªõc
  return withProxy(url);
};

/** ‚úÖ Prefetch m·ªôt s·ªë ·∫£nh n·ªïi b·∫≠t */
export async function prefetchProductImages(urls: string[]) {
  if (!urls?.length) return;

  const conn = (navigator as any).connection;
  if (conn?.saveData) return;

  for (const url of urls.slice(0, 5)) {
    await saveProductImageIfNotExists(url);
  }
}

/** ‚úÖ ƒê·∫£m b·∫£o cache tr∆∞·ªõc khi hi·ªÉn th·ªã */
export async function ensureProductImageCachedByUrl(originalUrl: string, fetchUrl?: string) {
  if (!originalUrl) return null;
  try {
    await saveProductImageIfNotExists(fetchUrl || originalUrl);
  } catch (err) {
    console.warn('‚ö†Ô∏è Cache error:', originalUrl, err);
  }
}
